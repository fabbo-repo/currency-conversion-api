name: Build, Test, Upload App to Docker Hub and Create Tag

on:
  push:
    branches:
      - main

jobs:
  build-test-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install poetry
          poetry install
        working-directory: ./backend-djangorest/api/src

      - name: Run tests
        run: |
          poetry run python manage.py test || true
        working-directory: ./backend-djangorest/api/src
      
      - name: Make migrations
        run: |
          poetry run python manage.py makemigrations
        working-directory: ./backend-djangorest/api/src

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          cat src/pyproject.toml
          export APP_VERSION=$(grep -m 1 version src/pyproject.toml | tr -d '=' | cut -d' ' -f3 | tr -d '"' | tr -d '\n' | tr -d '\r')
          echo "Using version ${APP_VERSION}"
          IMAGE_TAG="${DOCKER_USERNAME}/${REPO_NAME}:${APP_VERSION}"
          docker build . -t ${IMAGE_TAG}
          docker push ${IMAGE_TAG}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          REPO_NAME: ${{ github.repository }}
        working-directory: ./backend-djangorest/api

      - name: Create Release
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.APP_VERSION,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.APP_VERSION,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }